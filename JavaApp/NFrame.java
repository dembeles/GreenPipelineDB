/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package godpostgresql;


import java.awt.Color;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.RoundingMode;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.script.ScriptException;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.Document;
import javax.swing.text.html.HTMLEditorKit;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLStreamException;
import org.apache.commons.lang3.StringUtils;
import org.rosuda.JRI.REXP;
import org.xml.sax.SAXException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.swing.JFrame;
import javax.swing.JTable;
/**
 *
 * @author postgres
 */
public class NFrame extends javax.swing.JFrame {

    /**
     * Creates new form NFrame
     */
    
    String url=null;
    JOptionPane d = new JOptionPane();
    MetaData meta;
    public static Double B0=39.0;
     static String html=null;
    private boolean explain=false;
    boolean first1=false, first2=false, first3=false; 
    public static boolean app=false;
    public static volatile ArrayList<Double> val= new ArrayList<>();
    //Thread t ;
    SimpleSwingBrowser a=null;
    public static Thread t; 
    
    
    //Optimization settings
    public static int Pscan=1;
    public static int PIscan=1;
    public static int PHjoin=1;
    public static int Mjoin=1;
    public static int Hjoin=1;
    public static int Esort=1;
    public static int Enlj=1;
    public static int PBhead=1;
    
    public NFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        Qtext = new java.awt.TextArea();
        SQuery = new java.awt.Checkbox();
        MQuery = new java.awt.Checkbox();
        label24 = new java.awt.Label();
        QPath = new java.awt.TextField();
        Browser1 = new java.awt.Button();
        Qresults = new javax.swing.JPanel();
        TabRes = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        Qtab1 = new javax.swing.JTable();
        BRun = new java.awt.Button();
        BExplain = new java.awt.Button();
        BPowerEs = new java.awt.Button();
        Ptimeline = new java.awt.Button();
        jPanel2 = new javax.swing.JPanel();
        Plans = new javax.swing.JPanel();
        ExplTab = new javax.swing.JTabbedPane();
        DisplGr = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        EstimatedTab = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        label25 = new java.awt.Label();
        label26 = new java.awt.Label();
        Apowereal = new java.awt.TextField();
        AvnerReal = new java.awt.TextField();
        Status = new java.awt.Label();
        pwms = new java.awt.Label();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        label5 = new java.awt.Label();
        label6 = new java.awt.Label();
        label7 = new java.awt.Label();
        label8 = new java.awt.Label();
        pr_val = new java.awt.TextField();
        label9 = new java.awt.Label();
        epr_val = new java.awt.TextField();
        label15 = new java.awt.Label();
        label16 = new java.awt.Label();
        ann_val = new java.awt.TextField();
        eann_val = new java.awt.TextField();
        label18 = new java.awt.Label();
        rf_val = new java.awt.TextField();
        label19 = new java.awt.Label();
        erf_val = new java.awt.TextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        DriverPath = new java.awt.TextField();
        usbport = new java.awt.TextField();
        Check_Power = new java.awt.Button();
        jPanel6 = new javax.swing.JPanel();
        label3 = new java.awt.Label();
        Power_weight = new java.awt.TextField();
        label4 = new java.awt.Label();
        Time_weight = new java.awt.TextField();
        SET_Tradeoff = new java.awt.Button();
        jPanel7 = new javax.swing.JPanel();
        label10 = new java.awt.Label();
        label11 = new java.awt.Label();
        label12 = new java.awt.Label();
        label13 = new java.awt.Label();
        label14 = new java.awt.Label();
        Hostmane = new java.awt.TextField();
        Database = new java.awt.TextField();
        Port = new java.awt.TextField();
        username = new java.awt.TextField();
        Password = new java.awt.TextField();
        DBconnection = new java.awt.Button();
        jPanel8 = new javax.swing.JPanel();
        Mrpm = new java.awt.Checkbox();
        MANN = new java.awt.Checkbox();
        MRF = new java.awt.Checkbox();
        Query = new javax.swing.JPanel();
        Pmode = new java.awt.Checkbox();
        Dop = new java.awt.Checkbox();
        dopvalue = new java.awt.TextField();
        label17 = new java.awt.Label();
        SET_Query = new java.awt.Button();
        MetaData = new javax.swing.JPanel();
        DBInfo = new javax.swing.JPanel();
        label20 = new java.awt.Label();
        label21 = new java.awt.Label();
        label22 = new java.awt.Label();
        label23 = new java.awt.Label();
        Datasize = new java.awt.TextField();
        Tablenumber = new java.awt.TextField();
        Enco = new java.awt.TextField();
        Blocksize = new java.awt.TextField();
        Tables = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tab1 = new javax.swing.JTable();
        Optimizer1 = new javax.swing.JPanel();
        Pscan1 = new javax.swing.JCheckBox();
        PIscan1 = new javax.swing.JCheckBox();
        PBhead1 = new javax.swing.JCheckBox();
        PMerge1 = new javax.swing.JCheckBox();
        PHjoin1 = new javax.swing.JCheckBox();
        Emergejoin1 = new javax.swing.JCheckBox();
        Ehashj1 = new javax.swing.JCheckBox();
        Enlj1 = new javax.swing.JCheckBox();
        Esort1 = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(187, 203, 219));

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.black, null));

        Qtext.setText("select n_name,r_name, count(*) as nombre_client   \nfrom customer, region, nation     \nwhere c_nationkey = n_nationkey  \nand n_regionkey = r_regionkey  \ngroup by n_name, r_name \norder by n_name;");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Qtext, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Qtext, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        SQuery.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        SQuery.setForeground(new java.awt.Color(24, 10, 10));
        SQuery.setLabel("Single Query");
        SQuery.setState(true);
        SQuery.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SQueryMouseClicked(evt);
            }
        });

        MQuery.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        MQuery.setForeground(new java.awt.Color(17, 5, 5));
        MQuery.setLabel("Multiple Queries");
        MQuery.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MQueryMouseClicked(evt);
            }
        });

        label24.setText("File Path");

        QPath.setText("/usr/test/");

        Browser1.setLabel("...");
        Browser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Browser1ActionPerformed(evt);
            }
        });

        Qresults.setBackground(new java.awt.Color(229, 234, 234));
        Qresults.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.black, null), "Results", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(34, 17, 17))); // NOI18N

        Qtab1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(Qtab1);

        TabRes.addTab("Query 1", jScrollPane4);

        javax.swing.GroupLayout QresultsLayout = new javax.swing.GroupLayout(Qresults);
        Qresults.setLayout(QresultsLayout);
        QresultsLayout.setHorizontalGroup(
            QresultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabRes)
        );
        QresultsLayout.setVerticalGroup(
            QresultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabRes, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
        );

        BRun.setLabel("Run");
        BRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BRunActionPerformed(evt);
            }
        });

        BExplain.setLabel("Explain");
        BExplain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BExplainActionPerformed(evt);
            }
        });

        BPowerEs.setLabel("Power Estimation");
        BPowerEs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPowerEsActionPerformed(evt);
            }
        });

        Ptimeline.setLabel("PowerTimeline");
        Ptimeline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PtimelineActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Qresults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(label24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(QPath, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Browser1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(MQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(BRun, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BExplain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BPowerEs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Ptimeline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 19, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(label24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(QPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Browser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Qresults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BExplain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BPowerEs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ptimeline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Query EcoPro", jPanel1);

        Plans.setBackground(new java.awt.Color(229, 234, 234));
        Plans.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.black, null), "Queries statistics", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        Plans.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Plans.add(ExplTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 21, 570, 430));

        DisplGr.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        DisplGr.setText("Display Graph");
        DisplGr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplGrActionPerformed(evt);
            }
        });

        jPanel12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        EstimatedTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Query", "Estimated Power", "Estimated Energy", "Estimated CPU", "Estimated IO", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(EstimatedTab);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Plans, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(DisplGr, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(DisplGr, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Plans, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Query Explain", jPanel2);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Power Real Values", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(61, 61, 61))); // NOI18N

        label25.setText("Average Power:");

        label26.setText("Average Energy:");

        Apowereal.setText("-       Watts");

        AvnerReal.setText("-        Joules");

        Status.setText("Status");

        pwms.setText("Connected /Not connected");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Apowereal, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                        .addComponent(AvnerReal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pwms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(246, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Apowereal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AvnerReal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pwms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Power Values Estimated", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(61, 61, 61))); // NOI18N

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Machine Learning Method", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(34, 20, 20))); // NOI18N

        label5.setText("Polynomial Regression");

        label6.setText("Neural Network");

        label7.setText("Random Forest");

        label8.setText("Value");

        pr_val.setText("-");

        label9.setText("EER");

        epr_val.setText("-");

        label15.setText("Value");

        label16.setText("EER");

        ann_val.setText("-");

        eann_val.setText("-");

        label18.setText("Value");

        rf_val.setText("-");

        label19.setText("EER");

        erf_val.setText("-");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 113, Short.MAX_VALUE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(label19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addComponent(erf_val, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(label18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rf_val, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(label15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ann_val, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(label16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addComponent(eann_val, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pr_val, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(epr_val, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGap(273, 273, 273))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pr_val, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(epr_val, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ann_val, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eann_val, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rf_val, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(erf_val, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(3, 3, 3)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(3, 3, 3)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(539, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(154, 154, 154)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(155, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Statistics", jPanel3);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/godpostgresql/postg.png"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.black, null), "PowerMeter", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10), new java.awt.Color(29, 13, 13))); // NOI18N

        label1.setText("Driver Path");

        label2.setText("Port");

        DriverPath.setText("/usr/local/bin/wattsup");

        usbport.setText("ttyUSB0");

        Check_Power.setLabel("Check");
        Check_Power.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Check_PowerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DriverPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(usbport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Check_Power, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DriverPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usbport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(Check_Power, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.black, null), "Tradeoff", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10), new java.awt.Color(61, 61, 61))); // NOI18N

        label3.setText("Power");

        Power_weight.setText("0");

        label4.setText("Performance");

        Time_weight.setText("1");

        SET_Tradeoff.setLabel("Set");
        SET_Tradeoff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SET_TradeoffActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Power_weight, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Time_weight, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(SET_Tradeoff, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Time_weight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Power_weight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SET_Tradeoff, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.black, null), "DBConnexion", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10), new java.awt.Color(61, 61, 61))); // NOI18N

        label10.setText("Hostname");

        label11.setText("Database");

        label12.setText("Port");

        label13.setText("Username");

        label14.setText("Password");

        Hostmane.setText("localhost");

        Database.setText("tpch");

        Port.setText("5432");

        username.setText("postgres");

        Password.setText("postgres");

        DBconnection.setLabel("Connexion");
        DBconnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBconnectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(Hostmane, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(Database, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(Port, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(label13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(label14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(DBconnection, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Hostmane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Database, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(DBconnection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.black, null), "Machine Learning Techniques", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10), new java.awt.Color(61, 61, 61))); // NOI18N

        Mrpm.setLabel("Regression Polynomiale Multiple");
        Mrpm.setState(true);
        Mrpm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MrpmMouseClicked(evt);
            }
        });

        MANN.setLabel("Artificial Neural Network ");
        MANN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MANNMouseClicked(evt);
            }
        });

        MRF.setLabel("Random Forest");
        MRF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MRFMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Mrpm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MANN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MRF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(Mrpm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(MANN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(MRF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Query.setBackground(new java.awt.Color(229, 234, 234));
        Query.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.black, null), "Query", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10), new java.awt.Color(61, 61, 61))); // NOI18N

        Pmode.setLabel("Parallel mode");
        Pmode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PmodeMouseClicked(evt);
            }
        });

        Dop.setLabel("Degre of parallelism");
        Dop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DopMouseClicked(evt);
            }
        });

        dopvalue.setText("2");

        label17.setText("Value");

        SET_Query.setLabel("Set");
        SET_Query.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SET_QueryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout QueryLayout = new javax.swing.GroupLayout(Query);
        Query.setLayout(QueryLayout);
        QueryLayout.setHorizontalGroup(
            QueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QueryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(QueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(QueryLayout.createSequentialGroup()
                        .addComponent(label17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dopvalue, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SET_Query, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(QueryLayout.createSequentialGroup()
                        .addGroup(QueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Pmode, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Dop, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        QueryLayout.setVerticalGroup(
            QueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QueryLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(QueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SET_Query, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(QueryLayout.createSequentialGroup()
                        .addComponent(Pmode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(Dop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(QueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label17, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dopvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MetaData.setBackground(new java.awt.Color(229, 234, 234));
        MetaData.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.black, null), "MetaData", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10), new java.awt.Color(61, 61, 61))); // NOI18N

        DBInfo.setBackground(new java.awt.Color(229, 234, 234));
        DBInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.black, null), "DB Info", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N

        label20.setText("Datasize");

        label21.setText("Tables");

        label22.setText("Encoding");

        label23.setText("Block size");

        Datasize.setText("0  ");

        Tablenumber.setText("0");

        Enco.setText("UF8");

        Blocksize.setText("0");

        javax.swing.GroupLayout DBInfoLayout = new javax.swing.GroupLayout(DBInfo);
        DBInfo.setLayout(DBInfoLayout);
        DBInfoLayout.setHorizontalGroup(
            DBInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DBInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DBInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(DBInfoLayout.createSequentialGroup()
                        .addGroup(DBInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(DBInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Datasize, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Tablenumber, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(DBInfoLayout.createSequentialGroup()
                        .addGroup(DBInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(DBInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Blocksize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Enco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DBInfoLayout.setVerticalGroup(
            DBInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DBInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DBInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(DBInfoLayout.createSequentialGroup()
                        .addGroup(DBInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Datasize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Tablenumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DBInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Enco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DBInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Blocksize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        Tables.setBackground(new java.awt.Color(229, 234, 234));
        Tables.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.black, null), "DB Info", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N

        jScrollPane1.setBackground(new java.awt.Color(229, 234, 234));

        Tab1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Size", "Attributes", "Cardinality", "Page"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tab1.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(Tab1);

        javax.swing.GroupLayout TablesLayout = new javax.swing.GroupLayout(Tables);
        Tables.setLayout(TablesLayout);
        TablesLayout.setHorizontalGroup(
            TablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        TablesLayout.setVerticalGroup(
            TablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MetaDataLayout = new javax.swing.GroupLayout(MetaData);
        MetaData.setLayout(MetaDataLayout);
        MetaDataLayout.setHorizontalGroup(
            MetaDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MetaDataLayout.createSequentialGroup()
                .addComponent(DBInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Tables, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MetaDataLayout.setVerticalGroup(
            MetaDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tables, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(DBInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        Optimizer1.setBackground(new java.awt.Color(229, 234, 234));
        Optimizer1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.black, null), "Optimizer tuning", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10), new java.awt.Color(61, 61, 61))); // NOI18N

        Pscan1.setFont(new java.awt.Font("Ubuntu", 2, 14)); // NOI18N
        Pscan1.setSelected(true);
        Pscan1.setText("Parallel Scan");
        Pscan1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Pscan1ActionPerformed(evt);
            }
        });

        PIscan1.setFont(new java.awt.Font("Ubuntu", 2, 14)); // NOI18N
        PIscan1.setSelected(true);
        PIscan1.setText("Parallel Index Scan");
        PIscan1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PIscan1ActionPerformed(evt);
            }
        });

        PBhead1.setFont(new java.awt.Font("Ubuntu", 2, 14)); // NOI18N
        PBhead1.setSelected(true);
        PBhead1.setText("Parallel Bimap Head");
        PBhead1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PBhead1ActionPerformed(evt);
            }
        });

        PMerge1.setFont(new java.awt.Font("Ubuntu", 2, 14)); // NOI18N
        PMerge1.setSelected(true);
        PMerge1.setText("Parallel Merge");
        PMerge1.setEnabled(false);

        PHjoin1.setFont(new java.awt.Font("Ubuntu", 2, 14)); // NOI18N
        PHjoin1.setSelected(true);
        PHjoin1.setText("Parallel Hash J");
        PHjoin1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PHjoin1ActionPerformed(evt);
            }
        });

        Emergejoin1.setFont(new java.awt.Font("Ubuntu", 2, 14)); // NOI18N
        Emergejoin1.setSelected(true);
        Emergejoin1.setText("Enable Merge Join");
        Emergejoin1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Emergejoin1ActionPerformed(evt);
            }
        });

        Ehashj1.setFont(new java.awt.Font("Ubuntu", 2, 14)); // NOI18N
        Ehashj1.setSelected(true);
        Ehashj1.setText("Enable Hash Join");
        Ehashj1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ehashj1ActionPerformed(evt);
            }
        });

        Enlj1.setFont(new java.awt.Font("Ubuntu", 2, 14)); // NOI18N
        Enlj1.setSelected(true);
        Enlj1.setText("Enable NLJ     ");
        Enlj1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Enlj1ActionPerformed(evt);
            }
        });

        Esort1.setFont(new java.awt.Font("Ubuntu", 2, 14)); // NOI18N
        Esort1.setSelected(true);
        Esort1.setText("Enable Sort");
        Esort1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Esort1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Optimizer1Layout = new javax.swing.GroupLayout(Optimizer1);
        Optimizer1.setLayout(Optimizer1Layout);
        Optimizer1Layout.setHorizontalGroup(
            Optimizer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Optimizer1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(Optimizer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PIscan1)
                    .addComponent(PHjoin1)
                    .addComponent(Pscan1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(Optimizer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Emergejoin1)
                    .addComponent(Esort1)
                    .addComponent(Ehashj1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(Optimizer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Enlj1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PBhead1)
                    .addComponent(PMerge1))
                .addGap(3, 3, 3))
        );
        Optimizer1Layout.setVerticalGroup(
            Optimizer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Optimizer1Layout.createSequentialGroup()
                .addGroup(Optimizer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Pscan1)
                    .addGroup(Optimizer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Emergejoin1)
                        .addComponent(Enlj1)))
                .addGap(6, 6, 6)
                .addGroup(Optimizer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PIscan1)
                    .addComponent(Ehashj1)
                    .addComponent(PBhead1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Optimizer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PHjoin1)
                    .addComponent(Esort1)
                    .addComponent(PMerge1))
                .addGap(3, 3, 3))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Optimizer1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Query, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(MetaData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(3, 3, 3))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Query, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MetaData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Optimizer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jTabbedPane1.addTab("Settings", jPanel4);

        jMenuBar1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jMenu1.setText("File");

        jMenuItem1.setText("Quit");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem2.setText("Change SSD");
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PmodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PmodeMouseClicked
        // TODO add your handling code here:
        if(!Pmode.getState()) {Dop.setState(false); Dop.setEnabled(false);}
        else {Dop.setEnabled(true);}
    }//GEN-LAST:event_PmodeMouseClicked

    private void DopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DopMouseClicked
        // TODO add your handling code here:
        if(Dop.getState()) {dopvalue.setEnabled(true); SET_Query.setEnabled(true);}
        else {dopvalue.setEnabled(false); SET_Query.setEnabled(false);}
    }//GEN-LAST:event_DopMouseClicked

    private void Check_PowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Check_PowerActionPerformed
       String l,ll = null;
        try {
            // TODO add your handling code here:
            
            ProcessBuilder pb = new ProcessBuilder();
            pb.command("bash", "-c", "sudo "+ DriverPath.getText()+" -c 1 "+ usbport.getText()+" watts");
            Process pp =pb.start();
            BufferedReader reader =new BufferedReader(new InputStreamReader(pp.getInputStream()));
            while((l=reader.readLine())!=null){
                ll=l;
                //System.out.println(l);              
            }
            int ext=pp.waitFor();
            //System.out.println(ll.length());
            if(ext==0 && ll.length()>0) {
                app=true;
                d.showMessageDialog(this, "Driver Wattsup OK");
            }
            else {
                d.showMessageDialog(this, "Check that the file exist...");
            }
        } catch (IOException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Check_PowerActionPerformed

    private void SET_TradeoffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SET_TradeoffActionPerformed
        // TODO add your handling code here:
               try {
            // TODO add your handling code here:
            CProcess.setTradeoff(Integer.parseInt(Power_weight.getText()), Integer.parseInt(Time_weight.getText()));
        } catch (SQLException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SET_TradeoffActionPerformed

    private void MrpmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MrpmMouseClicked
        // TODO add your handling code here:
          if(Mrpm.getState()){ meta.setMLD('R',1);}
        else {meta.setMLD('R',0);}
    }//GEN-LAST:event_MrpmMouseClicked

    private void MANNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MANNMouseClicked
        // TODO add your handling code here:
                if(MANN.getState()){ meta.setMLD('N', 1);}
        else{ meta.setMLD('N', 0);}
    }//GEN-LAST:event_MANNMouseClicked

    private void MRFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MRFMouseClicked
        // TODO add your handling code here:
                if(MRF.getState()){ meta.setMLD('F', 1);}
        else { meta.setMLD('F', 0);}
    }//GEN-LAST:event_MRFMouseClicked

    private void SET_QueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SET_QueryActionPerformed
        // TODO add your handling code here:
                if(Integer.parseInt(dopvalue.getText())!=2 && Integer.parseInt(dopvalue.getText())>0){
            try {
                CProcess.setDOP(Integer.parseInt(dopvalue.getText()));
            } catch (SQLException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SET_QueryActionPerformed

    private void DBconnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DBconnectionActionPerformed
        // TODO add your handling code here:
       url=Hostmane.getText()+":"+Port.getText()+"/"+Database.getText()+"?user="+username.getText()+"&password="+Password.getText();
        d = new JOptionPane();
        try {
            if(DBcon.checkConDB(url)){
                d.showMessageDialog(this, "Connected to database.");
                meta=new MetaData(Database.getText());
                SetMetat(meta);
                SET_Tradeoff.setEnabled(true);
            }else {
                d.showMessageDialog(this, "Not connected to database...");
            }
        } catch (SQLException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DBconnectionActionPerformed

    private void DisplGrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplGrActionPerformed
          // TODO add your handling code here:
       /*     if(explain==false){try {
        CProcess.ExplainQuery(Qtext.getText(),0);
        ShowTree();
        ShowQuerySt(); explain=true;
        } catch (IOException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ScriptException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        }       catch (SQLException ex) {
                    Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SAXException ex) {
                    Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParserConfigurationException ex) {
                    Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (XMLStreamException ex) {
                    Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
}
    ArrayList<String> Allnode=CProcess.getAllnodes();
    ArrayList<String> Alledge=CProcess.getAlledges();
    int k=ExplTab.getSelectedIndex();
    byte[] encoded = null;
        try {
            encoded = Files.readAllBytes(Paths.get("../vis/hierarchicalLayout.html"));
        } catch (IOException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    html= new String(encoded, StandardCharsets.UTF_8);
    String tree=Allnode.get(k)+ " " +Alledge.get(k);
    html= html.replace("/* replace here ", tree);
    URL src1=getClass().getResource("../vis/vis.css");
    URL src2=getClass().getResource("../vis/vis.js");
    html= html.replace("vis.css", src1.toString());
    html= html.replace("vis.js", src2.toString());
    //if(t!=null) t.stop();
    display();
    DisplGr.setSelected(false);*/
       
    if(DisplGr.isSelected()) {
            if(explain==false){try {
        CProcess.ExplainQuery(Qtext.getText(),0);
        ShowTree();
        ShowQuerySt(); explain=true;
        } catch (IOException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ScriptException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        }       catch (SQLException ex) {
                    Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SAXException ex) {
                    Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParserConfigurationException ex) {
                    Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (XMLStreamException ex) {
                    Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
    }   
    String pat="";
    ArrayList<String> Allnode=CProcess.getAllnodes();
    ArrayList<String> Alledge=CProcess.getAlledges();
    int k=ExplTab.getSelectedIndex();
    byte[] encoded = null;
        try {   
            encoded = Files.readAllBytes(Paths.get("src/vis/hierarchicalLayout.html"));
        } catch (IOException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    html= new String(encoded, StandardCharsets.UTF_8);
    String tree=Allnode.get(k)+ " " +Alledge.get(k);
    html= html.replace("/* replace here */", tree);
    URL src1=getClass().getResource("../vis/vis.css");
    //String src1=getClass().getResource(pat+"/vis/vis.css").getPath().toString();
    URL src2=getClass().getResource("../vis/vis.js");
   // System.out.println("t:"+Paths.get("/vis/vis.css"));
    
    html= html.replace("vis.css", src1.toString());
    html= html.replace("vis.js", src2.toString());
    
// Segmentation en pipeline pour le plan en cours

    ArrayList<String> idGroup=new ArrayList<>();
    ArrayList<Boolean> treatedList=new ArrayList<>();
    ArrayList<Integer> plList=new ArrayList<>();
    ArrayList<ArrayList<Nodes>>  nds=CProcess.getnodesplan();
    ArrayList<Integer> NParend=CProcess.getNodesParends();
    String newNodesEdgesTree=tree; 
    int PL = 1, j = 0;
    for (Integer NParend1 : NParend) {
            treatedList.add(false);
        }
            
        for(int i=NParend.size()-1; i>0; i--){
         if(nds.get(k).get(i).getNode().contains("Scan") || !treatedList.get(i))
            {
               j=i;
               while(j > 0 &&
                      !"Sort".equals(nds.get(k).get(j).getNode()) &&                       // Blocking OPs
                      !"Hash".equals(nds.get(k).get(j).getNode()) &&
                      !"Aggregate".equals(nds.get(k).get(j).getNode()) &&
                      !"GroupAggregate".equals(nds.get(k).get(j).getNode()) &&
                      !"HashAggregate".equals(nds.get(k).get(j).getNode()) &&
                      !"Materialize".equals(nds.get(k).get(j).getNode()) &&
                      !"Nested Loop".equals(nds.get(k).get(j).getNode()) &&
                      !"Group".equals(nds.get(k).get(j).getNode()) &&
                      !"WindowAgg".equals(nds.get(k).get(j).getNode()) &&
                      !"Unique".equals(nds.get(k).get(j).getNode()) &&
                      !"SetOp".equals(nds.get(k).get(j).getNode()) &&
                      !"Limit".equals(nds.get(k).get(j).getNode()) &&
                      !"LockRows".equals(nds.get(k).get(j).getNode()) &&
                      !"Gather".equals(nds.get(k).get(j).getNode()) &&
                      !treatedList.get(j))
                {
                    idGroup.add("id: "+j+", group: 'PL"+PL+"'");
                    plList.add(PL);
                    treatedList.set(j, true);
                    j = NParend.get(j);
                }

                if(!treatedList.get(j))
                {
                    idGroup.add("id: "+j+", group: 'PL"+PL+"'");
                    plList.add(PL);
                    treatedList.set(j, true);
                }
                else if(j < plList.size() && PL != plList.get(j)) // TEST: modify PL of some node already treated when they are part of other subtree (eg: NL)
                {
                    for(int r=0; k<idGroup.size(); r++)
                    {
                        if(idGroup.get(r).contains("id: "+j+","))
                            idGroup.set(r, "id: "+j+", group: 'PL"+PL+"'");
                    }
                }
                if(!"Nested Loop".equals(nds.get(k).get(j).getNode()))
                    PL++;
            }
        }
         if(j==1) // Last node is a single pipeline
          idGroup.add("id: "+(j-1)+", group: 'PL"+PL+"'");

        // Update vis.js node-edge with new PL groups
        for(int i=0; i<idGroup.size(); i++)
        {
            String[] list = idGroup.get(i).split(",");
            //qDebug() << i << list;
          newNodesEdgesTree= newNodesEdgesTree.replace(list[0]+",", idGroup.get(i)+", shape: 'dot', size: 15, ");
          StringBuffer temp= new StringBuffer(newNodesEdgesTree);
         // temp.replace(temp.indexOf(", image:"), i, url)
          //System.out.println("string:"+newNodesEdgesTree.substring(temp.indexOf(", image:"),temp.indexOf("'image'")+7));
         // System.out.println("string:"+temp.indexOf(", image:")+" "+temp.indexOf("'image'")+7);
         temp= temp.replace(temp.indexOf(", image:"),(temp.indexOf("'image'")+7)," ");
          newNodesEdgesTree=temp.toString();
        }
        html= html.replace("/* replace here1 */", newNodesEdgesTree);
        
    //System.out.println("t:"+html);
    // html= html.replace("vis.css", pat+"/vis/vis.css");
    // html= html.replace("vis.js", pat+"/vis/vis.js");
    //if(t!=null) t.stop();
       display();}
    //DisplGr.setSelected(false);
        
    }//GEN-LAST:event_DisplGrActionPerformed

    private void SQueryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SQueryMouseClicked
        // TODO add your handling code here:
        if(SQuery.getState()){
            Qtext.setEnabled(true);
            MQuery.setState(false);
            Browser1.setEnabled(false);
        } else {
            Qtext.setEnabled(false);}

    }//GEN-LAST:event_SQueryMouseClicked

    private void MQueryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MQueryMouseClicked
        // TODO add your handling code here:
        if(MQuery.getState()){
            Browser1.setEnabled(true);
            SQuery.setState(false);
            Qtext.setEnabled(false);

        } else {
            Browser1.setEnabled(false);
        }
    }//GEN-LAST:event_MQueryMouseClicked

    private void Browser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Browser1ActionPerformed
        // TODO add your handling code here:
        JFileChooser c = new JFileChooser();
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            QPath.setText(c.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_Browser1ActionPerformed

    private void BRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BRunActionPerformed
        // TODO add your handling code here:
        ArrayList <ResultSet> rs=null;

        if(SQuery.getState()){

            try {
                rs=CProcess.ProcessQuery(Qtext.getText(),0);
                //Explain  CProcess.ProcessExplain(Qtext.getText(),0);
                //Explain Analysis  CProcess.ProcessExplain(Qtext.getText(),0);
                //DisplayQresult(rs);
            } catch (SQLException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        else{

            try {
                rs=CProcess.ProcessQuery(QPath.getText(),1);
                //   DisplayQresult(rs);
            } catch (SQLException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            DisplayQresult(rs);
        } catch (SQLException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(app){
            DisplayRealp(CProcess.getRealp());}
    }//GEN-LAST:event_BRunActionPerformed

    private void BExplainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BExplainActionPerformed
        // TODO add your handling code here:
        explain=true;
        if(SQuery.getState()){
            try {
                CProcess.ExplainQuery(Qtext.getText(),0);
                ShowTree();
                ShowQuerySt();

                //DisplayQresult(rs);
            } catch (SQLException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SAXException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParserConfigurationException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (XMLStreamException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ScriptException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
                CProcess.ExplainQuery(QPath.getText(),1);
                ShowTree();
                ShowQuerySt();
                //DisplayQresult(rs);
            } catch (SQLException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SAXException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParserConfigurationException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (XMLStreamException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ScriptException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            }}
    }//GEN-LAST:event_BExplainActionPerformed

    private void BPowerEsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPowerEsActionPerformed
        // TODO add your handling code here:

        if(SQuery.getState()){ try {
            CProcess.ExplainQuery(Qtext.getText(),0);
            //for real energy comparaison

            if(app){ 
                
                CProcess.ProcessQuery(Qtext.getText(),0);}
        } catch (SQLException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (XMLStreamException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        }   catch (InterruptedException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{ try {
            CProcess.ExplainQuery(QPath.getText(),1);

            if(app) {CProcess.ProcessQuery(QPath.getText(),1);}
        } catch (SQLException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (XMLStreamException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        }   catch (InterruptedException ex) {
                Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        ArrayList<QueryStatistic> Queries=CProcess.getQuerySt();
        Double Emrpm, Emann, Emrf, re=0.0, te=0.0;
        Double Erpm=0.0, Eann=0.0, Erf=0.0;
        Double Erpm1=0.0, Eann1=0.0, Erf1=0.0;
        String frameR="",frameR2="", CPU="",IO="",mem=" ";

        if(app){
            ArrayList<ArrayList<Double>> rel=null;
            rel=CProcess.getRealp();
            for (int i=0;i<rel.size();i++){
                Queries.get(i).setRealpower(rel.get(i).get(0));
                Queries.get(i).setRealenergy(rel.get(i).get(1));
               // System.out.println("Cqpower.:"+rel.get(i).get(1));
            }
        }

        for(int i=0;i<Queries.size();i++){
            CPU+= String.valueOf(Queries.get(i).getEstimatedCPU()).replace(",",".") +",";
            IO+= String.valueOf(Queries.get(i).getEstimatedIO()).replace(",", ".")+",";

            re+=Queries.get(i).getRealpower();
            te+=Queries.get(i).getRealenergy();
            //System.out.println("Cqpower.:"+rel.get(i).get(1));
        }
        if(Queries.size()==1) {CPU+=String.valueOf(Queries.get(0).getEstimatedCPU()).replace(",",".")+",";
            IO+= String.valueOf(Queries.get(0).getEstimatedIO()).replace(",", ".")+",";
        }
        CPU=StringUtils.chop(CPU);
        IO=StringUtils.chop(IO);
        mem=StringUtils.chop(mem);
        frameR="t<-data.frame(CPU=c("+CPU+")"+"," + "IO=c("+IO+"))";
        frameR2="t1<-data.frame(CPU=c("+CPU+")"+"," + "IO=c("+IO+")"+","+"mem=c("+mem+"))";

        REXP result=null;
        // Moteur R
        CProcess.InitRlearning();

        if(meta.MLD[0]==1){
            if(!first1) {CProcess.initRpost(1); first1=true;}
            CProcess.runR(frameR,1);
            result=CProcess.getRoutput();
            for(int i=0;i<Queries.size();i++){
                Emrpm=result.asDoubleArray()[i];
                if(app) Erpm+=Math.abs(Queries.get(i).getRealpower() - Emrpm)/Queries.get(i).getRealpower();
                Erpm1+=Emrpm;
            }
        }
        if(meta.MLD[1]==1){
            if(!first2) {CProcess.initRpost(2); first2=true;}
            CProcess.runR(frameR,2);
            result=CProcess.getRoutput();
            for(int i=0;i<Queries.size();i++){
                Emann=result.asDoubleArray()[i];
                if(app) Eann+=Math.abs(Queries.get(i).getRealpower() - Emann)/Queries.get(i).getRealpower();
                Eann1+=Emann;
            }

        }
        if(meta.MLD[2]==1){
            if(!first3) {CProcess.initRpost(3); first3=true;}
            CProcess.runR(frameR,3);
            result=CProcess.getRoutput();
            for(int i=0;i<Queries.size();i++){
                Emrf= result.asDoubleArray()[i];
                if(app) Erf+=Math.abs(Queries.get(i).getRealpower() - Emrf)/Queries.get(i).getRealpower();
                Erf1+=Emrf;
            }
        }

        //Affichage des valeurs dans les panels
        if(app) {Apowereal.setText(""+(re/Queries.size())+"  Watts"); AvnerReal.setText(te+ "   Joules");pwms.setText("connected");}
        else {// display not power meter pluggin}
        pwms.setText("Not connected");
        }
        DecimalFormat df = new DecimalFormat("#.##");
        df.setRoundingMode(RoundingMode.FLOOR);

        if(meta.MLD[0]==1){
            pr_val.setText(new Double(df.format(Erpm1))+"   Watts");
            if(app) epr_val.setText((new Double(df.format((Erpm/Queries.size())*100)))+" %");
        }

        if(meta.MLD[1]==1){
            ann_val.setText(new Double(df.format(Eann1))+"   Watts");
            if(app) eann_val.setText((new Double(df.format((Eann/Queries.size())*100)))+" %");
        }

        if(meta.MLD[2]==1){
            rf_val.setText(new Double(df.format(Erf1))+"  Watts");
            if(app) erf_val.setText((new Double(df.format((Erf/Queries.size())*100)))+" %");
        }
        jTabbedPane1.setSelectedIndex(2);

    }//GEN-LAST:event_BPowerEsActionPerformed

    private void PtimelineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PtimelineActionPerformed
        // TODO add your handling code here:
        if(app){

            if(CProcess.notlauch){
                Thread t=new Thread();
                ThreadFactory dft= Executors.defaultThreadFactory();
                t = dft.newThread(new WattsUpWorker());
                WattsUpWorker.i=0;
                WattsUpWorker.b=true;
                t.start(); CProcess.notlauch=false;
            }
        
        Thread tt = new Thread() {
            public void run() {
                SwingWorkerRealTime swingWorkerRealTime = new SwingWorkerRealTime();
                swingWorkerRealTime.go();

                //powerline.setSize(swingWorkerRealTime.getComponent().getSize());
                //powerline.add(swingWorkerRealTime.getComponent());
            }
        };
        try {
            Thread.sleep(5000);
        } catch (InterruptedException ex) {
            Logger.getLogger(NFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        tt.start();}
        else{System.out.println("Powermeter not connected..."); System.exit(0);}
    }//GEN-LAST:event_PtimelineActionPerformed

    private void Pscan1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Pscan1ActionPerformed
        // TODO add your handling code here:
        if(Pscan1.isSelected()){
            Pscan = 1;
        }else {
            Pscan=0;
        }
    }//GEN-LAST:event_Pscan1ActionPerformed

    private void PIscan1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PIscan1ActionPerformed
        // TODO add your handling code here:
                if(PIscan1.isSelected()){
            PIscan = 1;
        }else {
            PIscan=0;
        }
    }//GEN-LAST:event_PIscan1ActionPerformed

    private void PHjoin1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PHjoin1ActionPerformed
        // TODO add your handling code here:
                if(PHjoin1.isSelected()){
            PHjoin= 1;
        }else {
            PHjoin =0;
        }
    }//GEN-LAST:event_PHjoin1ActionPerformed

    private void Emergejoin1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Emergejoin1ActionPerformed
        // TODO add your handling code here:
       if(Emergejoin1.isSelected()){
            Mjoin= 1;
        }else {
            Mjoin =0;
        }
    }//GEN-LAST:event_Emergejoin1ActionPerformed

    private void Ehashj1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ehashj1ActionPerformed
        // TODO add your handling code here:
        if(Ehashj1.isSelected()){
            Hjoin= 1;
        }else {
            Hjoin =0;
        }
    }//GEN-LAST:event_Ehashj1ActionPerformed

    private void Esort1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Esort1ActionPerformed
        // TODO add your handling code here:
               if(Esort1.isSelected()){
            Esort= 1;
        }else {
            Esort=0;
        }
    }//GEN-LAST:event_Esort1ActionPerformed

    private void Enlj1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Enlj1ActionPerformed
        // TODO add your handling code here:
       if(Enlj1.isSelected()){
            Enlj= 1;
        }else {
            Enlj=0;
        }
    }//GEN-LAST:event_Enlj1ActionPerformed

    private void PBhead1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PBhead1ActionPerformed
        // TODO add your handling code here:
       if(PBhead1.isSelected()){
            PBhead= 1;
        }else {
            PBhead=0;
        }
    }//GEN-LAST:event_PBhead1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.TextField Apowereal;
    private java.awt.TextField AvnerReal;
    private java.awt.Button BExplain;
    private java.awt.Button BPowerEs;
    private java.awt.Button BRun;
    private java.awt.TextField Blocksize;
    private java.awt.Button Browser1;
    private java.awt.Button Check_Power;
    private javax.swing.JPanel DBInfo;
    private java.awt.Button DBconnection;
    private java.awt.TextField Database;
    private java.awt.TextField Datasize;
    private javax.swing.JCheckBox DisplGr;
    private java.awt.Checkbox Dop;
    private java.awt.TextField DriverPath;
    private javax.swing.JCheckBox Ehashj1;
    private javax.swing.JCheckBox Emergejoin1;
    private java.awt.TextField Enco;
    private javax.swing.JCheckBox Enlj1;
    private javax.swing.JCheckBox Esort1;
    private javax.swing.JTable EstimatedTab;
    private javax.swing.JTabbedPane ExplTab;
    private java.awt.TextField Hostmane;
    private java.awt.Checkbox MANN;
    private java.awt.Checkbox MQuery;
    private java.awt.Checkbox MRF;
    private javax.swing.JPanel MetaData;
    private java.awt.Checkbox Mrpm;
    private javax.swing.JPanel Optimizer1;
    private javax.swing.JCheckBox PBhead1;
    private javax.swing.JCheckBox PHjoin1;
    private javax.swing.JCheckBox PIscan1;
    private javax.swing.JCheckBox PMerge1;
    private java.awt.TextField Password;
    private javax.swing.JPanel Plans;
    private java.awt.Checkbox Pmode;
    private java.awt.TextField Port;
    private java.awt.TextField Power_weight;
    private javax.swing.JCheckBox Pscan1;
    private java.awt.Button Ptimeline;
    private java.awt.TextField QPath;
    private javax.swing.JPanel Qresults;
    private javax.swing.JTable Qtab1;
    private java.awt.TextArea Qtext;
    private javax.swing.JPanel Query;
    private java.awt.Button SET_Query;
    private java.awt.Button SET_Tradeoff;
    private java.awt.Checkbox SQuery;
    private java.awt.Label Status;
    private javax.swing.JTable Tab1;
    private javax.swing.JTabbedPane TabRes;
    private java.awt.TextField Tablenumber;
    private javax.swing.JPanel Tables;
    private java.awt.TextField Time_weight;
    private java.awt.TextField ann_val;
    private java.awt.TextField dopvalue;
    private java.awt.TextField eann_val;
    private java.awt.TextField epr_val;
    private java.awt.TextField erf_val;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private java.awt.Label label1;
    private java.awt.Label label10;
    private java.awt.Label label11;
    private java.awt.Label label12;
    private java.awt.Label label13;
    private java.awt.Label label14;
    private java.awt.Label label15;
    private java.awt.Label label16;
    private java.awt.Label label17;
    private java.awt.Label label18;
    private java.awt.Label label19;
    private java.awt.Label label2;
    private java.awt.Label label20;
    private java.awt.Label label21;
    private java.awt.Label label22;
    private java.awt.Label label23;
    private java.awt.Label label24;
    private java.awt.Label label25;
    private java.awt.Label label26;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private java.awt.TextField pr_val;
    private java.awt.Label pwms;
    private java.awt.TextField rf_val;
    private java.awt.TextField usbport;
    private java.awt.TextField username;
    // End of variables declaration//GEN-END:variables

private void SetMetat(MetaData meta) {
     
        Datasize.setText(meta.getDataSize());
        Datasize.setEditable(false);
        Tablenumber.setText(String.valueOf(meta.gettableN()));
        Tablenumber.setEditable(false);
        Enco.setText(meta.getEncoding());
        Enco.setEditable(false);
        Blocksize.setText(meta.getBlockS());
        Blocksize.setEditable(false);
       
         DefaultTableModel a=(DefaultTableModel) Tab1.getModel();
         for(int i = a.getRowCount()-1; i >=0; i--){ a.removeRow(i); }
         for (int i=0;i< meta.gettable_info().size();i++)
        {            
     a.insertRow(i, new Object[]{meta.gettable_info().get(i).get(0),meta.gettable_info().get(i).get(1), meta.gettable_info().get(i).get(2), meta.gettable_info().get(i).get(3), meta.gettable_info().get(i).get(4)});
        }
    }

private void ShowTree() throws FileNotFoundException, IOException, ScriptException {

  ArrayList<ArrayList<Nodes>>  nds=CProcess.getnodesplan();
  byte[] encoded = Files.readAllBytes(Paths.get("src/vis/NodeLayout.html"));
  String html1= new String(encoded, StandardCharsets.UTF_8);
   ExplTab.removeAll();
   String tr;
   DecimalFormat df = new DecimalFormat("#.##"); 
   
   for(int i=0;i<nds.size();i++){
           tr="";
       for(int j=0;j<nds.get(i).size();j++){
           tr+="<tr>"+
                   "<td>"+(j+1)+"</td>"+
                   "<td>"+nds.get(i).get(j).getNode()+"</td>"+
                   "<td>"+Double.valueOf(df.format(nds.get(i).get(j).getTotal_cost()- nds.get(i).get(j).getStart_cost()))+"</td>"+
                   "<td>"+nds.get(i).get(j).getCpu_cost()+"</td>"+
                   "<td>"+nds.get(i).get(j).getIo_cost()+"</td>"+
                   "<td>"+Double.valueOf(df.format(nds.get(i).get(j).getPower_cost()- B0))+"</td>"+
                   "<td>"+nds.get(i).get(j).getRows()+"</td>"+   
                "</tr>";
       }
    html1= html1.replace("<tree/>", tr);
    JEditorPane jEditorPane = new JEditorPane();
    jEditorPane.setEditable(true);   
    jEditorPane.setBackground(Color.WHITE);
    jEditorPane.setBounds(316, 110, 598, 545);
    jEditorPane.setContentType("text/html ");
    HTMLEditorKit kit = new HTMLEditorKit();
    jEditorPane.setEditorKit(kit);
    Document doc = kit.createDefaultDocument();
    jEditorPane.setDocument(doc);
        //System.out.println(html1);
       jEditorPane.setText(html1);
    //jEditorPane.setPage(html1);
    ExplTab.addTab("Query"+(i+1),new JScrollPane(jEditorPane,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED));
    jTabbedPane1.setSelectedIndex(1);
    
}}

private void ShowQuerySt() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    ArrayList<QueryStatistic> Queries=CProcess.getQuerySt();
    DefaultTableModel a=(DefaultTableModel) EstimatedTab.getModel();
    for(int i = a.getRowCount()-1; i >=0; i--){ a.removeRow(i); }
    for(int i=0;i<Queries.size();i++){
    a.insertRow(i, new Object[]{i+1,Queries.get(i).getEstimatedPower(),Queries.get(i).getEstimatedEnergy(), Queries.get(i).getEstimatedCPU(), Queries.get(i).getEstimatedIO(), Queries.get(i).getEstimatedTotalCost()});

    }
    
    }

   private void display() {
     Thread t=null;
      //a=new SimpleSwingBrowser();
      //a.run();
      //a.loadURL(html);
       SwingUtilities.invokeLater(new Runnable() {
             public void run() {
             SimpleSwingBrowser1 browser = new SimpleSwingBrowser1();
             browser.setSize(new Dimension(550, 600));
             System.out.println("test:");
                        browser.loadURL(html);
                        //browser.pack();
                        browser.setVisible(true);
                        //browser.repaint();
                 //System.out.println("t:"+html);
                        
         browser.addWindowListener(new java.awt.event.WindowAdapter() {
         @Override
         public void windowClosing(java.awt.event.WindowEvent windowEvent) {
         int res = JOptionPane.showOptionDialog(new JFrame(), "Are you sure you want to close this window?","Close Window",
         JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,
         new Object[] { "Yes", "No" }, JOptionPane.YES_OPTION);
               if(res== JOptionPane.YES_OPTION){
            //System.exit(0);
            //    browser.loadURL("");
                browser.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                //browser.setVisible(false);
                if(DisplGr.isSelected()) DisplGr.setSelected(false);
                } else {browser.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);}
             }
            }); 
             }     
              });
   
    }
   
       private void DisplayRealp(ArrayList<ArrayList<Double>> realp) {
       double s=0,p=0;
       for (int i=0;i<realp.size();i++){
           p+=realp.get(i).get(0);
           s+=realp.get(i).get(1);
       }
       Apowereal.setText((p/realp.size())+"  Watts");
       AvnerReal.setText(s+"  Joules");
    }
       
private void DisplayQresult(ArrayList<ResultSet> rs) throws SQLException {
JTable Qtab[]=new JTable[rs.size()];
TabRes.removeAll();
for (int j=0; j<rs.size();j++){
       ResultSetMetaData md = rs.get(j).getMetaData();
       String Columname[]=new String[md.getColumnCount()];
       
       for(int k=1;k<=md.getColumnCount();k++){
         Columname[k-1]=md.getColumnName(k);
       }
        Qtab[j]=new JTable();
        DefaultTableModel a=(DefaultTableModel) Qtab[j].getModel();
        a.setColumnIdentifiers(Columname);
       //int m=0;
       while(rs.get(j).next()){
           Object[] donnees = new Object[md.getColumnCount()];
           for(int k=1;k<=md.getColumnCount();k++){
              // donnees[m][k-1]=rs.get(j).getString(k);
                 donnees[k-1]=rs.get(j).getString(k);
           }
                 
           a.addRow(donnees);

        
       }  
        TabRes.addTab("Query"+(j+1),new JScrollPane(Qtab[j],JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED));
        Qtab[j].setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
}
}
       
}
